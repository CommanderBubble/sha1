This library is a slightly modified version of the one found at http://tamalenet/sha1 by Michael D. Leonhard.

The modifications are mostly the inclusion of a makefile for building a static library
This SHOULD be cross-compatible, but is untested on anything other than windows under GCC.

Documentation is the same as is provided in the unmodified library; changed only where relevant.

* Introduction

This is a C++ class that implements the Secure Hash Algorithm SHA-1.  The purpose of the algorithm is to calculate a strong hash of given bit string. By "strong", we mean that it is very difficult to find a different bit string that results in the same hash.  It is similarly difficult, using only the hash, to determine the original bit string.  SHA-1 produces a 20 byte (160 bit) hash.

* Building The Library

The provided makefile will produce a static lib to link against.
To build it follow these steps:
	1) autoreconf
	2) configure
	3) make
	4) make install
	
you can then 'make check' to run the library's self checks

by default the library will compile with the CXXFLAGS '-g -O2'. For a production library without the debugging symbols, call
make CXXFLAGS=<your_flags_here>

* Class Usage

The class is called SHA1.  The API consists of three methods:

SHA1::SHA1() is the class constructor

void SHA1::addBytes( const char* data, int num )
  Processes bytes into the hash.
  - data is a pointer to the first byte to be added. The bytes are not modified.
  - num is the number of bytes to process.

unsigned char* SHA1::getDigest()
  Completes the hashing process and returns the final hash.  The SHA1 instance should not be used after calling this method.
  Returns a pointer to a 20-byte hash.  Release the memory with free().

And two functions for using the resulting hash

void SHA1_hexPrinter( unsigned char* c, int l )
  Is a utility method that prints bytes to stdout in hexadecimal format.
  - c is a pointer to the first byte to be printed. The bytes are not modified.
  - l is the number of bytes to print.

void SHA1_hexToString(unsigned char* c, char* o, int l)
  Is a utility method that turns a digest into a human-readable string
  - c is a pointer to the first byte to be printed. The bytes are not modified.
  - o is a pointer to the destination char* for the string to be placed into
  - l is the number of bytes to print.

* Example

The following program will print one line to stdout:
 a9 99 3e 36 47 06 81 6a ba 3e 25 71 78 50 c2 6c 9c d0 d8 9d

#include <string.h>
#include <stdlib.h>
#include "sha1.h"
int main(int argc, char *argv[])
{
	#define BYTES "abc"
	SHA1 sha1_hash;
	sha1_hash.addBytes( BYTES, strlen( BYTES ) );
	unsigned char* digest = sha1_hash.getDigest();
	SHA1_hexPrinter( digest, 20 );
	free( digest );
}
